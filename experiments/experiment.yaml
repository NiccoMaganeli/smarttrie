---
- name: Gather local time
  hosts: localhost
  gather_facts: false
  any_errors_fatal: true
  tasks:
    - name: gather local time
      shell: "date +%Y%m%dT%H%M%S"
      register: localtime
      tags:
        - deploy
        - config
        - run
        - server
        - load
        - warmup
        - benchmark
        - cleanup
        - fetch

- name: Gather general facts
  hosts: all
  gather_facts: false
  any_errors_fatal: true
  vars:
    - experiment_name: "{{ hostvars['localhost']['localtime'].stdout }}"
  tasks:
    - name: gather custom facts
      set_fact:
        experiment_path: "/tmp/SmartTrie"
        home_path: "/home/maganeli"
        run_cmd: "java -cp dist/SmartTrie.jar"
        experiment_result_path: "./results/{{ experiment_name }}"
        threads: 4
        records: 5000000
        duration: 300
      tags:
        - deploy
        - config
        - run
        - server
        - load
        - warmup
        - benchmark
        - cleanup
        - fetch

- name: Deploy SmartTrie
  hosts: all
  gather_facts: false
  any_errors_fatal: true
  tasks:
    - name: ensure experiment path
      file:
        path: "{{ experiment_path }}"
        state: directory
      tags:
        - deploy
        - config
    - name: ensure config clean
      file:
        path: "{{ experiment_path }}/config"
        state: absent
      tags:
        - deploy
        - config
    - name: deploy config
      copy:
        src: ./config/
        dest: "{{ experiment_path }}/config/"
      when: not ansible_check_mode
      tags:
        - deploy
        - config
    - name: ensure no currentView file
      file:
        path: "{{ experiment_path }}/config/currentView"
        state: absent
      tags:
        - deploy
    - name: ensure dist path
      file:
        path: "{{ experiment_path }}/dist"
        state: directory
      tags:
        - deploy
    - name: ensure script path
      file:
        path: "{{ experiment_path }}/scripts"
        state: directory
      tags:
        - deploy
    - name: deploy scripts
      copy:
        src: "./scripts/{{ item }}"
        dest: "{{ experiment_path }}/scripts/{{ item }}"
        mode: a+x
      with_items:
        - keep-alive.sh
      tags:
        - deploy
    
- name: Deploy jar
  hosts: clients
  gather_facts: false
  any_errors_fatal: true
  tasks:
    - name: deploy jar
      copy:
        src: ../dist/SmartTrie.jar
        dest: "{{ home_path }}/SmartTrie.jar"
      when: not ansible_check_mode
      tags:
        - deploy

- name: Move jar
  hosts: all
  gather_facts: false
  any_errors_fatal: true
  tasks:
    - name: copy jar
      copy:
        remote_src: true
        src: "{{ home_path }}/SmartTrie.jar"
        dest: "{{ experiment_path }}/dist/SmartTrie.jar"
      tags:
        - deploy

- name: Run server
  hosts: servers
  gather_facts: false
  any_errors_fatal: true
  tasks:
    - name: ensure no old files
      file:
        path: "{{ experiment_path }}/files"
        state: absent
      when: keep_files is not defined
      tags:
        - run
        - server
    - name: ensure no old logs
      file:
        path: "{{ experiment_path }}/logs"
        state: absent
      tags:
        - run
        - server
    - name: ensure required folders
      file:
        path: "{{ experiment_path }}/{{ item }}"
        state: directory
      with_items:
        - files
        - logs
      tags:
        - run
        - server

- name: Start servers
  hosts: servers
  vars:
    - server_id: "{{ groups['servers'].index(inventory_hostname) }}"
    - state: "tree-map"
    - wait_time: 10
    - keep_alive_out: keep-alive.out
  gather_facts: false
  any_errors_fatal: true
  serial: 1
  tasks:
    - name: ensure no control files from last run
      file:
        path: "{{ experiment_path }}/{{ keep_alive_out }}"
        state: absent
      tags:
        - run
    - name: keep kill.lock until load end
      file:
        path: "{{ experiment_path }}/kill.lock"
        state: touch
      tags:
        - run
    - name: run server
      shell:
        chdir: "{{ experiment_path }}"
        cmd: "./scripts/keep-alive.sh {{ server_id }} {{ state }} {{ wait_time }} > {{ keep_alive_out }}"
      async: 18000 # 5h
      poll: 0
      when: not ansible_check_mode
      tags:
        - run
        - server
    - name: pause
      pause: 
        seconds: 30
      tags:
        - run
        - server


- name: Run client load
  hosts: clients
  gather_facts: false
  any_errors_fatal: true
  tasks:
    - name: ensure no old logs
      file:
        path: "{{ experiment_path }}/logs"
        state: absent
      tags:
        - run
    - name: ensure logs folder
      file:
        path: "{{ experiment_path }}/logs"
        state: directory
      tags:
        - run
        - load
        - warmup
        - benchmark
    - name: load data
      shell:
        chdir: "{{ experiment_path }}"
        cmd: "{{ run_cmd }} -Xms2G -Xmx4G site.ycsb.Client -load -s -db smarttrie.app.client.Client -threads {{ threads }} -P config/workload -p recordcount={{ records }} 2>&1 | tee logs/load.log"
      async: 18000 # 5h
      poll: 10
      when: not ansible_check_mode
      tags:
        - run
        - load

- name: Remove kill.lock
  hosts: servers
  gather_facts: false
  any_errors_fatal: true
  tasks:
    - name: remove kill.lock
      file:
        path: "{{ experiment_path }}/kill.lock"
        state: absent
      tags:
        - run

- name: Run client benchmark
  hosts: clients
  gather_facts: false
  any_errors_fatal: true
  tasks:
    - name: benchmark run
      shell:
        chdir: "{{ experiment_path }}"
        cmd: "{{ run_cmd }} -Xms2G -Xmx4G site.ycsb.Client -t -s -db smarttrie.app.client.Client -threads {{ threads }} -P config/workload -p recordcount={{ records }} -p maxexecutiontime={{ duration }} 2>&1 | tee logs/benchmark.log"
      async: 18000 # 5h
      poll: 10
      when: not ansible_check_mode
      tags:
        - run
        - benchmark

- name: Stop running processes
  hosts: all
  gather_facts: false
  strategy: free
  tasks:
    - name: pkill scripts, servers and clients
      shell:
        cmd: "pkill {{ item }}"
      with_items:
        - bash
        - java
      ignore_errors: true
      failed_when: false
      tags:
        - stop

- name: Fetch logs
  hosts: all
  gather_facts: false
  any_errors_fatal: true
  tasks:
    - name: clean up old benchmark results
      run_once: true
      local_action:
        module: file
        path: "{{ experiment_result_path }}"
        state: absent
      tags:
        - run
        - benchmark
        - fetch∆í
    - name: ensure results folder
      run_once: true
      local_action:
        module: file
        path: "{{ experiment_result_path }}"
        state: directory
      tags:
        - run
        - benchmark
        - fetch
    - name: fetch client results
      fetch:
        src: "{{ experiment_path }}/logs/{{ item }}"
        dest: "{{ experiment_result_path }}"
        fail_on_missing: no
      with_items:
        - load.log
        - benchmark.log
      tags:
        - run
        - benchmark
        - fetch
    - name: fetch server logs
      fetch:
        src: "{{ experiment_path }}/logs/{{ item }}"
        dest: "{{ experiment_result_path }}"
        fail_on_missing: no
      with_items:
        - app.log
        - gc.log
      tags:
        - run
        - benchmark
        - fetch

- name: Cleanup hosts
  hosts: all
  gather_facts: false
  any_errors_fatal: true
  tasks:
    - name: clean up {{ experiment_path }}
      file:
        path: "{{ experiment_path }}"
        state: absent
      tags:
        - cleanup
    - name: remove jar
      file:
        path: "{{ home_path }}/SmartTrie.jar"
        state: absent
      tags:
        - cleanup
